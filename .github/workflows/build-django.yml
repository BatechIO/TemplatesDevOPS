name: Build to Amazon ECR
# Controls when the action will run.
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      RELEASE_REVISION:
        required: true
        type: string
    secrets:
      GH_APP_CREDENTIALS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_ARN_ROLE:
        required: true
      AWS_SESSION_NAME:
        required: true


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ecr:
    name: Build ECR
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
          
      - name: Obtain GitHub App Installation Access Token
        id: githubAppAuth
        run: |
          GITHUB_TOKEN="$(npx obtain-github-app-installation-access-token ci ${{ secrets.GH_APP_CREDENTIALS_TOKEN }})"
          echo "::add-mask::$GITHUB_TOKEN"
          echo "::set-output name=token::$GITHUB_TOKEN"
#          echo "token=$GITHUB_TOKEN" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: 3.9

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          role-session-name: ${{ secrets.AWS_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Docker cache layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build & Push Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.RELEASE_REVISION }}
          RELEASE_IMAGE_LATEST: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:latest
        run: |
          echo "ENVIRONMENT -> ${{ inputs.ENVIRONMENT }}"
          docker buildx create --use
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache-new --build-arg INPUT_ENVIRONMENT=${{ inputs.ENVIRONMENT }} --build-arg INPUT_GITHUB_TOKEN=${{ steps.GithubAppAuth.outputs.token }} --build-arg INPUT_AWS_ACCESS=${{ secrets.AWS_ACCESS_KEY_ID }} --build-arg INPUT_AWS_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} --build-arg INPUT_AWS_REGION=${{ secrets.AWS_REGION }} -t ${{ env.RELEASE_IMAGE }} -t ${{ env.RELEASE_IMAGE_LATEST }} --push .
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      
